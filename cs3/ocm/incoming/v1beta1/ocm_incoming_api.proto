// Copyright 2018-2025 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.ocm.incoming.v1beta1;

import "cs3/identity/user/v1beta1/resources.proto";
import "cs3/rpc/v1beta1/status.proto";
import "cs3/sharing/ocm/v1beta1/resources.proto";
import "cs3/storage/provider/v1beta1/resources.proto";
import "cs3/types/v1beta1/types.proto";

option csharp_namespace = "Cs3.Ocm.Incoming.V1Beta1";
option go_package = "incomingv1beta1";
option java_multiple_files = true;
option java_outer_classname = "OcmIncomingApiProto";
option java_package = "com.cs3.ocm.incoming.v1beta1";
option objc_class_prefix = "COI";
option php_namespace = "Cs3\\Ocm\\Incoming\\V1Beta1";

// OCM Incoming API
//
// The OCM Incoming API is used to persist in the local system the incoming remote
// shares that are sent via the Open Cloud Mesh (OCM) sharing protocol.
// Implementations are expected to expose the `/ocm` endpoints according to the
// OCM API, and in response to those endpoints call the following API.
// Support for multi-protocol shares is included, if the remote sender supplies
// a multi-protocol share.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service OcmIncomingAPI {
  // Creates a new OCM share in response to a call from remote to `/ocm/shares`. See:
  // https://cs3org.github.io/OCM-API/docs.html?branch=v1.2.0&repo=OCM-API&user=cs3org#/paths/~1shares/post
  rpc CreateIncomingOCMShare(CreateIncomingOCMShareRequest) returns (CreateIncomingOCMShareResponse);
  // Updates an OCM share in response to a notification from remote to `/ocm/notifications`. See:
  // https://cs3org.github.io/OCM-API/docs.html?branch=v1.2.0&repo=OCM-API&user=cs3org#/paths/~1notifications/post
  rpc UpdateIncomingOCMShare(UpdateIncomingOCMShareRequest) returns (UpdateIncomingOCMShareResponse);
  // Deletes an OCM share in response to a notification from remote to `/ocm/notifications`. See:
  // https://cs3org.github.io/OCM-API/docs.html?branch=v1.2.0&repo=OCM-API&user=cs3org#/paths/~1notifications/post
  rpc DeleteIncomingOCMShare(DeleteIncomingOCMShareRequest) returns (DeleteIncomingOCMShareResponse);
}

message CreateIncomingOCMShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // OPTIONAL.
  // Description for the share.
  string description = 2;
  // REQUIRED.
  // Name of the resource (file or folder).
  string name = 3;
  // REQUIRED.
  // Identifier to identify the resource at the provider side. This is unique per provider.
  string resource_id = 4;
  // REQUIRED.
  // Provider specific identifier of the owner of the resource.
  cs3.identity.user.v1beta1.UserId owner = 5;
  // REQUIRED.
  // Provider specific identifier of the user that wants to share the resource.
  cs3.identity.user.v1beta1.UserId sender = 6;
  // REQUIRED.
  // Consumer specific identifier of the user or group the provider wants to share the resource with.
  // This is known in advance, for example using the OCM invitation flow.
  // Please note that the consumer service endpoint is known in advance as well, so this is no part of the request body.
  // TODO: this field needs to represent either a user or group in the future, not only a user.
  cs3.identity.user.v1beta1.UserId share_with = 7;
  // REQUIRED.
  // Resource type.
  cs3.storage.provider.v1beta1.ResourceType resource_type = 8;
  // REQUIRED.
  // Recipient share type.
  cs3.sharing.ocm.v1beta1.ShareType share_type = 9;
  // OPTIONAL.
  // The expiration time for the OCM share.
  cs3.types.v1beta1.Timestamp expiration = 10;
  // REQUIRED.
  // The protocols which are used to establish synchronisation,
  // with their access rights.
  // See also cs3/sharing/ocm/v1beta1/resources.proto for how to map
  // this to the OCM share payload.
  repeated cs3.sharing.ocm.v1beta1.Protocol protocols = 11;
  // OPTIONAL.
  // A nonce to be exchanged for a (potentially short-lived) bearer token.
  string code = 12;
}

message CreateIncomingOCMShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // Unique ID to identify the share at the consumer side.
  string id = 3;
  // REQUIRED.
  cs3.types.v1beta1.Timestamp created = 4;
}

message UpdateIncomingOCMShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // Unique ID to identify the share at the consumer side.
  string ocm_share_id = 2;
  // OPTIONAL.
  // Description for the share.
  string description = 3;
  // OPTIONAL.
  // Recipient share type.
  cs3.sharing.ocm.v1beta1.ShareType share_type = 5;
  // OPTIONAL.
  // The expiration time for the OCM share.
  cs3.types.v1beta1.Timestamp expiration = 6;
  // OPTIONAL.
  // The protocols which are used to establish synchronisation,
  // with their access rights.
  repeated cs3.sharing.ocm.v1beta1.Protocol protocols = 7;
}

message UpdateIncomingOCMShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
}

message DeleteIncomingOCMShareRequest {
  // REQUIRED.
  // Unique ID to identify the share at the consumer side.
  string id = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
}

message DeleteIncomingOCMShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
}
