// Copyright 2018-2025 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.types.v1beta1;

option csharp_namespace = "Cs3.Types.V1Beta1";
option go_package = "typesv1beta1";
option java_multiple_files = true;
option java_outer_classname = "TypesProto";
option java_package = "com.cs3.types.v1beta1";
option objc_class_prefix = "CTX";
option php_namespace = "Cs3\\Types\\V1Beta1";

// Opaque represents opaque information
// in a form on a map.
// For example, a local filesystem can
// use this message to include filesystem
// extended attributes.
message Opaque {
  // REQUIRED.
  map<string, OpaqueEntry> map = 1;
}

// OpaqueEntry represents the encoded
// opaque value.
message OpaqueEntry {
  // REQUIRED.
  // The decoder to use: json, xml, toml, ...
  // TODO(labkode): make encoder a fixed set using a enum type?
  string decoder = 1;
  // REQUIRED.
  // The encoded value.
  bytes value = 2;
}

// Adapted from Google google/protobuf/timestamp.proto.
// A Timestamp represents a point in time independent of any time zone or local
// calendar, encoded as a count of seconds and fractions of seconds at
// nanosecond resolution. The count is relative to an epoch at UTC midnight on
// January 1, 1970, in the proleptic Gregorian calendar which extends the
// Gregorian calendar backwards to year one.
//
// The range MUST be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
// Restricting to this range ensures the conversion from and to [RFC
// 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  uint64 seconds = 1;
  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time.
  // Value MUST be from 0 to 999,999,999
  // inclusive.
  uint32 nanos = 2;
}
