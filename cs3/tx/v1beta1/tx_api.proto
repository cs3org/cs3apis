// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.tx.v1beta1;

option csharp_namespace = "Cs3.Tx.V1Beta1";
option go_package = "txv1beta1";
option java_multiple_files = true;
option java_outer_classname = "TxApiProto";
option java_package = "com.cs3.tx.v1beta1";
option objc_class_prefix = "CTX";
option php_namespace = "Cs3\\Tx\\V1Beta1";

import "cs3/rpc/v1beta1/status.proto";
import "cs3/sharing/ocm/v1beta1/resources.proto";
import "cs3/tx/v1beta1/resources.proto";
import "cs3/types/v1beta1/types.proto";

// Tx API
//
// The Tx API provides data transfer capabilities.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service TxAPI {
  // Requests creation of a transfer.
  // Returns a CreateTransferResponse.
  rpc CreateTransfer(CreateTransferRequest) returns (CreateTransferResponse);
  // Requests a transfer status.
  rpc GetTransferStatus(GetTransferStatusRequest) returns (GetTransferStatusResponse);
  // Requests to cancel a transfer.
  rpc CancelTransfer(CancelTransferRequest) returns (CancelTransferResponse);
  // Requests a list of transfers received by the authenticated principle.
  // If a filter is specified, only transfers satisfying the filter MUST be returned.
  rpc ListTransfers(ListTransfersRequest) returns (ListTransfersResponse);
  // Requests retrying a transfer.
  rpc RetryTransfer(RetryTransferRequest) returns (RetryTransferResponse);
}

message CreateTransferRequest {
  // REQUIRED.
  // The source target URI. Should include at the minimum all the info needed to access the source.
  // https://golang.org/pkg/net/url/#URL provides a quick view of the format.
  string src_target_uri = 1;
  // REQUIRED.
  // The destination target URI. Should include at the minimum all the info needed to access the destination.
  // https://golang.org/pkg/net/url/#URL provides a quick view of the format.
  string dest_target_uri = 2;
  // REQUIRED.
  // The share Id of the share this transfer is based on.
  cs3.sharing.ocm.v1beta1.ShareId share_id = 3;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 4;
}

message CreateTransferResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // TxInfo, includes transfer id, status, description.
  TxInfo tx_info = 2;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 3;
}

message GetTransferStatusRequest {
  // REQUIRED.
  // The transfer identifier.
  TxId tx_id = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
}

message GetTransferStatusResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // TxInfo, includes ao. transfer id, status, description.
  TxInfo tx_info = 2;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 3;
}

message CancelTransferRequest {
  // REQUIRED.
  // The transfer identifier.
  TxId tx_id = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
}

message CancelTransferResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // TxInfo, includes ao. transfer id, status, description.
  TxInfo tx_info = 2;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 3;
}

message ListTransfersRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // Represents a filter to apply to the request.
  message Filter {
    // The filter type.
    enum Type {
      TYPE_INVALID = 0;
      TYPE_STATUS = 1;
      TYPE_SHARE_ID = 2;
      TYPE_TX_ID = 3;
    }
    // REQUIRED.
    Type type = 1;
    // REQUIRED.
    oneof term {
      Status status = 2;
      cs3.sharing.ocm.v1beta1.ShareId share_id = 3;
      TxId tx_id = 4;
    }
  }
  // OPTIONAL.
  // The list of filters to apply if any.
  repeated Filter filters = 2;
}

message ListTransfersResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // List of TxInfo types representing transfers.
  repeated TxInfo transfers = 2;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 3;
}

message RetryTransferRequest {
  // REQUIRED.
  // The transfer identifier.
  TxId tx_id = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
}

message RetryTransferResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // REQUIRED.
  // TxInfo, includes ao. transfer id, status, description.
  TxInfo tx_info = 2;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 3;
}
