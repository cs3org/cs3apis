// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.rpc.v1beta1;

import "cs3/rpc/v1beta1/code.proto";
import "cs3/types/v1beta1/types.proto";

option csharp_namespace = "Cs3.Rpc.V1Beta1";
option go_package = "rpcv1beta1";
option java_multiple_files = true;
option java_outer_classname = "StatusProto";
option java_package = "com.cs3.rpc.v1beta1";
option objc_class_prefix = "CRX";
option php_namespace = "Cs3\\Rpc\\V1Beta1";

// The `Status` message contains two pieces of data: error code and error message.
// The error code should be an enum value of [cs3.rpc.code].
// The error message should be a developer-facing English
// message that helps developers *understand* and *resolve* the error.
message Status {
  // REQUIRED.
  // The status code, which should be an enum value of [cs3.rpc.code][cs3.rpc.code].
  Code code = 1;
  // OPTIONAL.
  // A developer-facing error message, which should be in English. Any
  // user-facing error message should be localized and sent in the
  string message = 2;
  // OPTIONAL.
  // A trace added to the response for helping support to identify client problems.
  string trace = 3;
  // OPTIONAL.
  // A target URI as per RFC3986 to redirect requests to another location.
  // A Status message with CODE_REDIRECT MUST always set the target_uri.
  // https://golang.org/pkg/net/url/#URL provides a quick view of the format.
  string target_uri = 4;
  // OPTIONAL.
  // InnerError represents an encoded error.
  // This makes it possible to transport error types
  // and match them on the client side by type.
  // The InnerError pattern originates from graph.
  cs3.types.v1beta1.OpaqueEntry InnerError = 5;
}
