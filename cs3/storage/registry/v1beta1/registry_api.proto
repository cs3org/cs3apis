// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.storage.registry.v1beta1;

import "cs3/rpc/v1beta1/status.proto";
import "cs3/storage/provider/v1beta1/resources.proto";
import "cs3/storage/registry/v1beta1/resources.proto";
import "cs3/types/v1beta1/types.proto";

option csharp_namespace = "Cs3.Storage.Registry.V1Beta1";
option go_package = "registryv1beta1";
option java_multiple_files = true;
option java_outer_classname = "RegistryApiProto";
option java_package = "com.cs3.storage.registry.v1beta1";
option objc_class_prefix = "CSR";
option php_namespace = "Cs3\\Storage\\Registry\\V1Beta1";

// Storage Registry API
//
// The Storage Registry API is meant to as registry to obtain
// information of available storage providers.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service RegistryAPI {
  // Returns the storage provider that is reponsible for the given
  // resource reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  rpc GetStorageProviders(GetStorageProvidersRequest) returns (GetStorageProvidersResponse);
  // Returns a list of the available storage providers known by this registry.
  rpc ListStorageProviders(ListStorageProvidersRequest) returns (ListStorageProvidersResponse);
  // Gets the user home storage provider.
  rpc GetHome(GetHomeRequest) returns (GetHomeResponse);
  // TODO(labkode): missing methods for adding and removing a storage provider
  // with different visibility levels (system-wide, user-wide, group-wide)...
}

message GetHomeRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
}

message GetHomeResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The storage provider for the user home.
  cs3.storage.registry.v1beta1.ProviderInfo provider = 3;
}

message GetStorageProvidersRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // The reference for the resource.
  cs3.storage.provider.v1beta1.Reference ref = 2;
}

message GetStorageProvidersResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The storage providers handling the requested storage resource.
  repeated cs3.storage.registry.v1beta1.ProviderInfo providers = 3;
}

message ListStorageProvidersRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // TODO(labkode): maybe add some filter?
}

message ListStorageProvidersResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The list of storage providers this registry knows about.
  repeated cs3.storage.registry.v1beta1.ProviderInfo providers = 3;
}
