// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

syntax = "proto3";

package cs3.sharing.collaboration.v1beta1;

import "cs3/rpc/v1beta1/status.proto";
import "cs3/sharing/collaboration/v1beta1/resources.proto";
import "cs3/storage/provider/v1beta1/resources.proto";
import "cs3/types/v1beta1/types.proto";
import "google/protobuf/field_mask.proto";

option csharp_namespace = "Cs3.Sharing.Collaboration.V1Beta1";
option go_package = "collaborationv1beta1";
option java_multiple_files = true;
option java_outer_classname = "CollaborationApiProto";
option java_package = "com.cs3.sharing.collaboration.v1beta1";
option objc_class_prefix = "CSC";
option php_namespace = "Cs3\\Sharing\\Collaboration\\V1Beta1";

// User Share Provider API
//
// The User Share Provider API is meant to manipulate share
// resources for a specific share type (user, group, ocm, ...)
// from the perspective of the creator or the share and
// from the perspective of the receiver of the share.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service CollaborationAPI {
  // Creates a new share.
  // MUST return CODE_NOT_FOUND if the resource reference does not exist.
  // MUST return CODE_LOCKED if the resource reference already locked.
  // MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
  // (owner, shared_resource, grantee).
  // New shares MUST be created in the state SHARE_STATE_PENDING.
  rpc CreateShare(CreateShareRequest) returns (CreateShareResponse);
  // Removes a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc RemoveShare(RemoveShareRequest) returns (RemoveShareResponse);
  // Gets share information for a single share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc GetShare(GetShareRequest) returns (GetShareResponse);
  // List the shares the authenticated principal has created,
  // both as owner and creator. If a filter is specified, only
  // shares satisfying the filter MUST be returned.
  rpc ListShares(ListSharesRequest) returns (ListSharesResponse);
  // Updates a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateShare(UpdateShareRequest) returns (UpdateShareResponse);
  // List all shares the authenticated principal has received.
  rpc ListReceivedShares(ListReceivedSharesRequest) returns (ListReceivedSharesResponse);
  // Update the received share to change the share state or the display name.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateReceivedShare(UpdateReceivedShareRequest) returns (UpdateReceivedShareResponse);
  // Get the information for the given received share reference.
  // MUST return CODE_NOT_FOUND if the received share reference does not exist.
  rpc GetReceivedShare(GetReceivedShareRequest) returns (GetReceivedShareResponse);
}

message CreateShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // The information of the resource to be shared.
  storage.provider.v1beta1.ResourceInfo resource_info = 2;
  // REQUIRED.
  // The share grant for the share.
  ShareGrant grant = 3;
}

message CreateShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The created share.
  Share share = 3;
}

message UpdateShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // Deprecated use the share and update_mask attribute.
  ShareReference ref = 2;
  // REQUIRED.
  message UpdateField {
    // One of the update fields MUST be specified.
    oneof field {
      // Update the permissions.
      SharePermissions permissions = 2;
      // Update the display name.
      string display_name = 3;
    }
  }
  // REQUIRED.
  // Deprecated use the share and update_mask attribute.
  UpdateField field = 3;
  // The update mask applies to the resource. For the `FieldMask` definition,
  // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 4;
  // REQUIRED.
  // The share containing the new data
  Share share = 5;
}

message UpdateShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The updated share.
  Share share = 3;
}

message ListSharesRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // OPTIONAL.
  // The list of filters to apply if any.
  repeated Filter filters = 2;
  // OPTIONAL.
  // Clients use this field to specify the maximum number of results to be returned by the server.
  // The server may further constrain the maximum number of results returned in a single page.
  // If the page_size is 0, the server will decide the number of results to be returned.
  // see https://cloud.google.com/apis/design/design_patterns#list_pagination
  int32 page_size = 3;
  // OPTIONAL.
  // The client uses this field to request a specific page of the list results.
  string page_token = 4;
}

message ListSharesResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The list of shares.
  repeated Share shares = 3;
  // OPTIONAL.
  // This field represents the pagination token to retrieve the next page of results.
  // If the value is "", it means no further results for the request.
  // see https://cloud.google.com/apis/design/design_patterns#list_pagination
  string next_page_token = 4;
}

message RemoveShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  ShareReference ref = 2;
}

message RemoveShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
}

message GetShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  ShareReference ref = 2;
}

message GetShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The share.
  Share share = 3;
}

message ListReceivedSharesRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // OPTIONAL.
  // The list of filters to apply if any.
  repeated Filter filters = 3;
  // OPTIONAL.
  // Clients use this field to specify the maximum number of results to be returned by the server.
  // The server may further constrain the maximum number of results returned in a single page.
  // If the page_size is 0, the server will decide the number of results to be returned.
  // see https://cloud.google.com/apis/design/design_patterns#list_pagination
  int32 page_size = 4;
  // OPTIONAL.
  // The client uses this field to request a specific page of the list results.
  string page_token = 5;
}

message ListReceivedSharesResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The list of received shares.
  repeated ReceivedShare shares = 3;
  // OPTIONAL.
  // This field represents the pagination token to retrieve the next page of results.
  // If the value is "", it means no further results for the request.
  // see https://cloud.google.com/apis/design/design_patterns#list_pagination
  string next_page_token = 4;
}

// TODO(labkode): clean up display_name ? we'll use storage links for that.
message UpdateReceivedShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // The received share to update.
  ReceivedShare share = 2;
  // The update mask applies to the resource. For the `FieldMask` definition,
  // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateReceivedShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The updated share.
  ReceivedShare share = 3;
}

message GetReceivedShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 1;
  // REQUIRED.
  // The reference of the received share.
  ShareReference ref = 2;
}

message GetReceivedShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.v1beta1.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.v1beta1.Opaque opaque = 2;
  // REQUIRED.
  // The share.
  ReceivedShare share = 3;
}
